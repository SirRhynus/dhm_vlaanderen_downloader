# -*- coding: utf-8 -*-

"""
/***************************************************************************
 DHMVlaanderenDownloader
                                 A QGIS plugin
 Downloads and clips the DHM Vlaanderen to a given area
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-12-01
        copyright            : (C) 2020 by Rien Boydens
        email                : rien.boydens@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Rien Boydens'
__date__ = '2020-12-01'
__copyright__ = '(C) 2020 by Rien Boydens'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingException,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterRasterDestination,
                       QgsRasterLayer,
                       QgsVectorLayer,
                       QgsProcessingMultiStepFeedback)
from qgis import processing
import os.path
import zipfile


class DHMVlaanderenDownloaderAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'
    DHMV = 'DHMV'
    RESOLUTION = 'RESOLUTION'

    DHMV_ENUM = ['II DSM', 'II DTM', 'I DHM']
    RESOLUTION_ENUM = ['1m', '5m', '25m', '100m']

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # Add the study area
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Study Area'),
                [QgsProcessing.TypeVectorPolygon]
            )
        )

        # Add the options of the DHM types
        self.addParameter(
            QgsProcessingParameterEnum(
                self.DHMV,
                'DHMV',
                self.DHMV_ENUM,
                defaultValue='II DSM'
            )
        )
        
        self.addParameter(
            QgsProcessingParameterEnum(
                self.RESOLUTION,
                self.tr('Resolution'),
                self.RESOLUTION_ENUM,
                defaultValue='1m'
            )
        )

        # Add the output file
        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.OUTPUT,
                'DHM'
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Check if version and resolution parameters are compatible
        compatibility = {
            'I DHM': ['5m', '25m', '100m'],
            'II DTM': ['1m', '5m', '25m', '100m'],
            'II DSM': ['1m', '5m']
        }
        dhmv = self.DHMV_ENUM[self.parameterAsEnum(parameters, self.DHMV, context)]
        resolution = self.RESOLUTION_ENUM[self.parameterAsEnum(parameters, self.RESOLUTION, context)]
        if resolution not in compatibility[dhmv]:
            raise QgsProcessingException(f'Resolution {resolution} not available for DHMV {dhmv}.\n\
                Resolutions {compatibility[dhmv]} are available for DHMV {dhmv}.')

        if feedback.isCanceled():
            return {}

        output = self.parameterAsOutputLayer(parameters, self.OUTPUT, context)

        # Determine feature kaartbladen
        feedback.setProgressText(self.tr('Determining kaartbladen...'))
        if (dhmv[:2] == 'I ' and resolution == '100m') or (dhmv[:2] == 'II' and resolution in ('25m', '100m')):
            # Don't download the same Vlaanderen kaartblad for high resolutions
            kbls = {'1'}
        else:
            kbl = processing.run(
                'native:extractbylocation', 
                { 
                    'INPUT' : QgsVectorLayer(os.path.join(os.path.dirname(__file__), 'Kbl/Kbl.shp')),
                    'INTERSECT' : parameters['INPUT'], 
                    'METHOD' : 0, 
                    'PREDICATE' : [0,1,6], 
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                },
                is_child_algorithm=True, 
                context=context, 
                feedback=feedback
            )['OUTPUT']

            kbls = {int(feature.attribute('CODE')) for feature in context.getMapLayer(kbl).getFeatures()}
        
        if feedback.isCanceled():
            return {}

        # Split feedback in multiple steps according to the amount of kaartbladen
        multistep_feedback = QgsProcessingMultiStepFeedback(len(kbls) + 1, feedback)

        # Download DHM kaartbladen
        dhms = []
        for index, kbl in enumerate(kbls):
            multistep_feedback.setCurrentStep(index)
            multistep_feedback.setProgressText(f"Downloading kaartblad {index+1}/{len(kbls)}...")
            # Download zipfiles
            if dhmv == 'I DHM':
                url = f'https://downloadagiv.blob.core.windows.net/digitaal-hoogtemodel-vlaanderen-raster-{resolution}/geoTIFF/{f"Gegroepeerd%20per%20kaartblad/R{resolution[:-1]}_{kbl:02d}.zip" if resolution != "100m" else "R100.zip"}'
            else:
                url = f'https://downloadagiv.blob.core.windows.net/dhm-vlaanderen-ii-{dhmv[-3:].lower()}-raster-{resolution}/DHMVII{dhmv[-3:]}RAS{resolution}{f"_k{kbl:02d}.zip" if resolution in ("1m", "5m") else ".zip"}'
            zip_file_name = processing.run(
                'native:filedownloader', 
                {
                    'URL': url, 
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                },
                is_child_algorithm=True,
                context=context,
                feedback=multistep_feedback
            )['OUTPUT']

            if multistep_feedback.isCanceled():
                return {}
            
            # Extract tiffs from zipfile
            feedback.setProgressText(f'Extracting {index+1}/{len(kbls)}...')
            with zipfile.ZipFile(zip_file_name) as zpf:
                for name in zpf.namelist():
                    if name.endswith('.tif') or name.endswith('.tiff'):
                        dhms.append(QgsRasterLayer(zpf.extract(name, path=os.path.dirname(zip_file_name))))
                    if name.endswith('.tfw'):
                        zpf.extract(name, path=os.path.dirname(zip_file_name))
            
            if multistep_feedback.isCanceled():
                return {}
        
        multistep_feedback.setCurrentStep(len(kbls))
        # Divide the last step in more steps for the last algorithms to come
        multistep_feedback1 = QgsProcessingMultiStepFeedback(2, multistep_feedback)

        multistep_feedback1.setCurrentStep(0)
        multistep_feedback1.setProgressText("Building Virtual Raster...")
        # Build a virtual raster of the downloaded tiffs
        vrt = processing.run(
            'gdal:buildvirtualraster', 
            {
                'INPUT': dhms, 
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT,
                'SEPARATE': False, 
                'SRC_NODATA': '-9999'
            },
            is_child_algorithm=True,
            context=context,
            feedback=multistep_feedback1
        )['OUTPUT']

        if multistep_feedback1.isCanceled():
            return {}

        multistep_feedback1.setCurrentStep(1)
        multistep_feedback1.setProgressText('Clipping to layer...')
        # Clip the DHM to to study area
        output = processing.run(
            'gdal:cliprasterbymasklayer',
            {
                'INPUT': vrt,
                'MASK': parameters['INPUT'],
                'CROP_TO_CUTLINE': True,
                'KEEP_RESOLUTION': True,
                'OUTPUT': output
            },
            is_child_algorithm=True,
            context=context,
            feedback=multistep_feedback1
        )['OUTPUT']

        feedback.setProgressText('Done.')

        # Return the results
        return {self.OUTPUT: output}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Download DHM Vlaanderen'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return DHMVlaanderenDownloaderAlgorithm()
